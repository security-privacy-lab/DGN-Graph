import json
import os
from sklearn.model_selection import KFold

def save_graph(graph, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    with open(os.path.join(output_dir, "G.json"), "w") as f:
        json.dump(graph, f)

def generate_id_map(graph):
    id_map = {}
    index = 0
    for node in graph["nodes"]:
        id_map[node["id"]] = index
        index += 1
    return id_map

def generate_class_map(graph):
    class_map = {}
    for node in graph["nodes"]:
        class_map[node["id"]] = node["label"]
    return class_map

def save_id_map(id_map, output_dir):
    with open(os.path.join(output_dir, "id_map.json"), "w") as f:
        json.dump(id_map, f)

def save_class_map(class_map, output_dir):
    with open(os.path.join(output_dir, "class_map.json"), "w") as f:
        json.dump(class_map, f)

if __name__ == "__main__":
    # Load the list of graphs
    with open("graph_creation/processed_data/pygraphs.json", "r") as f:
        graph_lst = json.load(f)["graphs"]

    # Perform cross-validation at the graph level with KFold
    n_splits = 5
    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)

    # Iterate over the splits generated by KFold
    for fold_idx, (train_index, test_index) in enumerate(kf.split(graph_lst)):
        train_graphs = [graph_lst[i] for i in train_index]
        test_graphs = [graph_lst[i] for i in test_index]

        # Process each training graph
        for idx, graph in enumerate(train_graphs):
            output_dir = f"graph_creation/processed_data/fold_{fold_idx + 1}/train/"
            save_graph(graph, output_dir)
            id_map = generate_id_map(graph)
            class_map = generate_class_map(graph)
            save_id_map(id_map, output_dir)
            save_class_map(class_map, output_dir)

        # Process each testing graph
        for idx, graph in enumerate(test_graphs):
            output_dir = f"graph_creation/processed_data/fold_{fold_idx + 1}/test/"
            save_graph(graph, output_dir)
            id_map = generate_id_map(graph)
            class_map = generate_class_map(graph)
            save_id_map(id_map, output_dir)
            save_class_map(class_map, output_dir)
